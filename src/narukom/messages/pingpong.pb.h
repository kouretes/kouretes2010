// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pingpong.proto

#ifndef PROTOBUF_pingpong_2eproto__INCLUDED
#define PROTOBUF_pingpong_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_pingpong_2eproto();
void protobuf_AssignDesc_pingpong_2eproto();
void protobuf_ShutdownFile_pingpong_2eproto();

class PingMessage;
class PongMessage;

// ===================================================================

class PingMessage : public ::google::protobuf::Message {
 public:
  PingMessage();
  virtual ~PingMessage();
  
  PingMessage(const PingMessage& from);
  
  inline PingMessage& operator=(const PingMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PingMessage& default_instance();
  
  void Swap(PingMessage* other);
  
  // implements Message ----------------------------------------------
  
  PingMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PingMessage& from);
  void MergeFrom(const PingMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1 [default = "localhost"];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // required string publisher = 2 [default = ""];
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 2;
  inline const ::std::string& publisher() const;
  inline void set_publisher(const ::std::string& value);
  inline void set_publisher(const char* value);
  inline void set_publisher(const char* value, size_t size);
  inline ::std::string* mutable_publisher();
  
  // required string topic = 3 [default = "global"];
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  
  // required int32 timeout = 4 [default = 0];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // required string timestamp = 5 [default = ""];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
  // optional int32 side = 6;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 6;
  inline ::google::protobuf::int32 side() const;
  inline void set_side(::google::protobuf::int32 value);
  
  // optional bool successful = 7 [default = false];
  inline bool has_successful() const;
  inline void clear_successful();
  static const int kSuccessfulFieldNumber = 7;
  inline bool successful() const;
  inline void set_successful(bool value);
  
  // @@protoc_insertion_point(class_scope:PingMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::std::string* publisher_;
  static const ::std::string _default_publisher_;
  ::std::string* topic_;
  static const ::std::string _default_topic_;
  ::google::protobuf::int32 timeout_;
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  ::google::protobuf::int32 side_;
  bool successful_;
  friend void  protobuf_AddDesc_pingpong_2eproto();
  friend void protobuf_AssignDesc_pingpong_2eproto();
  friend void protobuf_ShutdownFile_pingpong_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PingMessage* default_instance_;
};
// -------------------------------------------------------------------

class PongMessage : public ::google::protobuf::Message {
 public:
  PongMessage();
  virtual ~PongMessage();
  
  PongMessage(const PongMessage& from);
  
  inline PongMessage& operator=(const PongMessage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PongMessage& default_instance();
  
  void Swap(PongMessage* other);
  
  // implements Message ----------------------------------------------
  
  PongMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PongMessage& from);
  void MergeFrom(const PongMessage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string host = 1 [default = "localhost"];
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // required string publisher = 2 [default = ""];
  inline bool has_publisher() const;
  inline void clear_publisher();
  static const int kPublisherFieldNumber = 2;
  inline const ::std::string& publisher() const;
  inline void set_publisher(const ::std::string& value);
  inline void set_publisher(const char* value);
  inline void set_publisher(const char* value, size_t size);
  inline ::std::string* mutable_publisher();
  
  // required string topic = 3 [default = "global"];
  inline bool has_topic() const;
  inline void clear_topic();
  static const int kTopicFieldNumber = 3;
  inline const ::std::string& topic() const;
  inline void set_topic(const ::std::string& value);
  inline void set_topic(const char* value);
  inline void set_topic(const char* value, size_t size);
  inline ::std::string* mutable_topic();
  
  // required int32 timeout = 4 [default = 0];
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 4;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // required string timestamp = 5 [default = ""];
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
  // optional int32 side = 6;
  inline bool has_side() const;
  inline void clear_side();
  static const int kSideFieldNumber = 6;
  inline ::google::protobuf::int32 side() const;
  inline void set_side(::google::protobuf::int32 value);
  
  // optional bool successful = 7 [default = false];
  inline bool has_successful() const;
  inline void clear_successful();
  static const int kSuccessfulFieldNumber = 7;
  inline bool successful() const;
  inline void set_successful(bool value);
  
  // @@protoc_insertion_point(class_scope:PongMessage)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::std::string* publisher_;
  static const ::std::string _default_publisher_;
  ::std::string* topic_;
  static const ::std::string _default_topic_;
  ::google::protobuf::int32 timeout_;
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  ::google::protobuf::int32 side_;
  bool successful_;
  friend void  protobuf_AddDesc_pingpong_2eproto();
  friend void protobuf_AssignDesc_pingpong_2eproto();
  friend void protobuf_ShutdownFile_pingpong_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static PongMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// PingMessage

// required string host = 1 [default = "localhost"];
inline bool PingMessage::has_host() const {
  return _has_bit(0);
}
inline void PingMessage::clear_host() {
  if (host_ != &_default_host_) {
    host_->assign(_default_host_);
  }
  _clear_bit(0);
}
inline const ::std::string& PingMessage::host() const {
  return *host_;
}
inline void PingMessage::set_host(const ::std::string& value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void PingMessage::set_host(const char* value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void PingMessage::set_host(const char* value, size_t size) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PingMessage::mutable_host() {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string(_default_host_);
  }
  return host_;
}

// required string publisher = 2 [default = ""];
inline bool PingMessage::has_publisher() const {
  return _has_bit(1);
}
inline void PingMessage::clear_publisher() {
  if (publisher_ != &_default_publisher_) {
    publisher_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PingMessage::publisher() const {
  return *publisher_;
}
inline void PingMessage::set_publisher(const ::std::string& value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void PingMessage::set_publisher(const char* value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void PingMessage::set_publisher(const char* value, size_t size) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PingMessage::mutable_publisher() {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  return publisher_;
}

// required string topic = 3 [default = "global"];
inline bool PingMessage::has_topic() const {
  return _has_bit(2);
}
inline void PingMessage::clear_topic() {
  if (topic_ != &_default_topic_) {
    topic_->assign(_default_topic_);
  }
  _clear_bit(2);
}
inline const ::std::string& PingMessage::topic() const {
  return *topic_;
}
inline void PingMessage::set_topic(const ::std::string& value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void PingMessage::set_topic(const char* value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void PingMessage::set_topic(const char* value, size_t size) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PingMessage::mutable_topic() {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string(_default_topic_);
  }
  return topic_;
}

// required int32 timeout = 4 [default = 0];
inline bool PingMessage::has_timeout() const {
  return _has_bit(3);
}
inline void PingMessage::clear_timeout() {
  timeout_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 PingMessage::timeout() const {
  return timeout_;
}
inline void PingMessage::set_timeout(::google::protobuf::int32 value) {
  _set_bit(3);
  timeout_ = value;
}

// required string timestamp = 5 [default = ""];
inline bool PingMessage::has_timestamp() const {
  return _has_bit(4);
}
inline void PingMessage::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& PingMessage::timestamp() const {
  return *timestamp_;
}
inline void PingMessage::set_timestamp(const ::std::string& value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void PingMessage::set_timestamp(const char* value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void PingMessage::set_timestamp(const char* value, size_t size) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PingMessage::mutable_timestamp() {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// optional int32 side = 6;
inline bool PingMessage::has_side() const {
  return _has_bit(5);
}
inline void PingMessage::clear_side() {
  side_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 PingMessage::side() const {
  return side_;
}
inline void PingMessage::set_side(::google::protobuf::int32 value) {
  _set_bit(5);
  side_ = value;
}

// optional bool successful = 7 [default = false];
inline bool PingMessage::has_successful() const {
  return _has_bit(6);
}
inline void PingMessage::clear_successful() {
  successful_ = false;
  _clear_bit(6);
}
inline bool PingMessage::successful() const {
  return successful_;
}
inline void PingMessage::set_successful(bool value) {
  _set_bit(6);
  successful_ = value;
}

// -------------------------------------------------------------------

// PongMessage

// required string host = 1 [default = "localhost"];
inline bool PongMessage::has_host() const {
  return _has_bit(0);
}
inline void PongMessage::clear_host() {
  if (host_ != &_default_host_) {
    host_->assign(_default_host_);
  }
  _clear_bit(0);
}
inline const ::std::string& PongMessage::host() const {
  return *host_;
}
inline void PongMessage::set_host(const ::std::string& value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void PongMessage::set_host(const char* value) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void PongMessage::set_host(const char* value, size_t size) {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PongMessage::mutable_host() {
  _set_bit(0);
  if (host_ == &_default_host_) {
    host_ = new ::std::string(_default_host_);
  }
  return host_;
}

// required string publisher = 2 [default = ""];
inline bool PongMessage::has_publisher() const {
  return _has_bit(1);
}
inline void PongMessage::clear_publisher() {
  if (publisher_ != &_default_publisher_) {
    publisher_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& PongMessage::publisher() const {
  return *publisher_;
}
inline void PongMessage::set_publisher(const ::std::string& value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void PongMessage::set_publisher(const char* value) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(value);
}
inline void PongMessage::set_publisher(const char* value, size_t size) {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  publisher_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PongMessage::mutable_publisher() {
  _set_bit(1);
  if (publisher_ == &_default_publisher_) {
    publisher_ = new ::std::string;
  }
  return publisher_;
}

// required string topic = 3 [default = "global"];
inline bool PongMessage::has_topic() const {
  return _has_bit(2);
}
inline void PongMessage::clear_topic() {
  if (topic_ != &_default_topic_) {
    topic_->assign(_default_topic_);
  }
  _clear_bit(2);
}
inline const ::std::string& PongMessage::topic() const {
  return *topic_;
}
inline void PongMessage::set_topic(const ::std::string& value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void PongMessage::set_topic(const char* value) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(value);
}
inline void PongMessage::set_topic(const char* value, size_t size) {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string;
  }
  topic_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PongMessage::mutable_topic() {
  _set_bit(2);
  if (topic_ == &_default_topic_) {
    topic_ = new ::std::string(_default_topic_);
  }
  return topic_;
}

// required int32 timeout = 4 [default = 0];
inline bool PongMessage::has_timeout() const {
  return _has_bit(3);
}
inline void PongMessage::clear_timeout() {
  timeout_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 PongMessage::timeout() const {
  return timeout_;
}
inline void PongMessage::set_timeout(::google::protobuf::int32 value) {
  _set_bit(3);
  timeout_ = value;
}

// required string timestamp = 5 [default = ""];
inline bool PongMessage::has_timestamp() const {
  return _has_bit(4);
}
inline void PongMessage::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& PongMessage::timestamp() const {
  return *timestamp_;
}
inline void PongMessage::set_timestamp(const ::std::string& value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void PongMessage::set_timestamp(const char* value) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void PongMessage::set_timestamp(const char* value, size_t size) {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PongMessage::mutable_timestamp() {
  _set_bit(4);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// optional int32 side = 6;
inline bool PongMessage::has_side() const {
  return _has_bit(5);
}
inline void PongMessage::clear_side() {
  side_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 PongMessage::side() const {
  return side_;
}
inline void PongMessage::set_side(::google::protobuf::int32 value) {
  _set_bit(5);
  side_ = value;
}

// optional bool successful = 7 [default = false];
inline bool PongMessage::has_successful() const {
  return _has_bit(6);
}
inline void PongMessage::clear_successful() {
  successful_ = false;
  _clear_bit(6);
}
inline bool PongMessage::successful() const {
  return successful_;
}
inline void PongMessage::set_successful(bool value) {
  _set_bit(6);
  successful_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_pingpong_2eproto__INCLUDED
