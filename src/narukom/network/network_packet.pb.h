// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: network_packet.proto

#ifndef PROTOBUF_network_5fpacket_2eproto__INCLUDED
#define PROTOBUF_network_5fpacket_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_network_5fpacket_2eproto();
void protobuf_AssignDesc_network_5fpacket_2eproto();
void protobuf_ShutdownFile_network_5fpacket_2eproto();

class NetworkHeader;
class NetworkPacket;

// ===================================================================

class NetworkHeader : public ::google::protobuf::Message {
 public:
  NetworkHeader();
  virtual ~NetworkHeader();
  
  NetworkHeader(const NetworkHeader& from);
  
  inline NetworkHeader& operator=(const NetworkHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkHeader& default_instance();
  
  void Swap(NetworkHeader* other);
  
  // implements Message ----------------------------------------------
  
  NetworkHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkHeader& from);
  void MergeFrom(const NetworkHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 message_num = 1;
  inline bool has_message_num() const;
  inline void clear_message_num();
  static const int kMessageNumFieldNumber = 1;
  inline ::google::protobuf::uint32 message_num() const;
  inline void set_message_num(::google::protobuf::uint32 value);
  
  // required uint32 packet_num = 2;
  inline bool has_packet_num() const;
  inline void clear_packet_num();
  static const int kPacketNumFieldNumber = 2;
  inline ::google::protobuf::uint32 packet_num() const;
  inline void set_packet_num(::google::protobuf::uint32 value);
  
  // required uint32 number_of_packets = 3;
  inline bool has_number_of_packets() const;
  inline void clear_number_of_packets();
  static const int kNumberOfPacketsFieldNumber = 3;
  inline ::google::protobuf::uint32 number_of_packets() const;
  inline void set_number_of_packets(::google::protobuf::uint32 value);
  
  // required string timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline const ::std::string& timestamp() const;
  inline void set_timestamp(const ::std::string& value);
  inline void set_timestamp(const char* value);
  inline void set_timestamp(const char* value, size_t size);
  inline ::std::string* mutable_timestamp();
  
  // required uint32 timeout = 5;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 5;
  inline ::google::protobuf::uint32 timeout() const;
  inline void set_timeout(::google::protobuf::uint32 value);
  
  // required string host = 6;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 6;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  
  // required string type = 7;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 7;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  
  // @@protoc_insertion_point(class_scope:NetworkHeader)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 message_num_;
  ::google::protobuf::uint32 packet_num_;
  ::google::protobuf::uint32 number_of_packets_;
  ::std::string* timestamp_;
  static const ::std::string _default_timestamp_;
  ::google::protobuf::uint32 timeout_;
  ::std::string* host_;
  static const ::std::string _default_host_;
  ::std::string* type_;
  static const ::std::string _default_type_;
  friend void  protobuf_AddDesc_network_5fpacket_2eproto();
  friend void protobuf_AssignDesc_network_5fpacket_2eproto();
  friend void protobuf_ShutdownFile_network_5fpacket_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NetworkHeader* default_instance_;
};
// -------------------------------------------------------------------

class NetworkPacket : public ::google::protobuf::Message {
 public:
  NetworkPacket();
  virtual ~NetworkPacket();
  
  NetworkPacket(const NetworkPacket& from);
  
  inline NetworkPacket& operator=(const NetworkPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkPacket& default_instance();
  
  void Swap(NetworkPacket* other);
  
  // implements Message ----------------------------------------------
  
  NetworkPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NetworkPacket& from);
  void MergeFrom(const NetworkPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .NetworkHeader header = 1;
  inline bool has_header() const;
  inline void clear_header();
  static const int kHeaderFieldNumber = 1;
  inline const ::NetworkHeader& header() const;
  inline ::NetworkHeader* mutable_header();
  
  // required bytes byte_buffer = 2;
  inline bool has_byte_buffer() const;
  inline void clear_byte_buffer();
  static const int kByteBufferFieldNumber = 2;
  inline const ::std::string& byte_buffer() const;
  inline void set_byte_buffer(const ::std::string& value);
  inline void set_byte_buffer(const char* value);
  inline void set_byte_buffer(const void* value, size_t size);
  inline ::std::string* mutable_byte_buffer();
  
  // @@protoc_insertion_point(class_scope:NetworkPacket)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::NetworkHeader* header_;
  ::std::string* byte_buffer_;
  static const ::std::string _default_byte_buffer_;
  friend void  protobuf_AddDesc_network_5fpacket_2eproto();
  friend void protobuf_AssignDesc_network_5fpacket_2eproto();
  friend void protobuf_ShutdownFile_network_5fpacket_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NetworkPacket* default_instance_;
};
// ===================================================================


// ===================================================================

// NetworkHeader

// required uint32 message_num = 1;
inline bool NetworkHeader::has_message_num() const {
  return _has_bit(0);
}
inline void NetworkHeader::clear_message_num() {
  message_num_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 NetworkHeader::message_num() const {
  return message_num_;
}
inline void NetworkHeader::set_message_num(::google::protobuf::uint32 value) {
  _set_bit(0);
  message_num_ = value;
}

// required uint32 packet_num = 2;
inline bool NetworkHeader::has_packet_num() const {
  return _has_bit(1);
}
inline void NetworkHeader::clear_packet_num() {
  packet_num_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 NetworkHeader::packet_num() const {
  return packet_num_;
}
inline void NetworkHeader::set_packet_num(::google::protobuf::uint32 value) {
  _set_bit(1);
  packet_num_ = value;
}

// required uint32 number_of_packets = 3;
inline bool NetworkHeader::has_number_of_packets() const {
  return _has_bit(2);
}
inline void NetworkHeader::clear_number_of_packets() {
  number_of_packets_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 NetworkHeader::number_of_packets() const {
  return number_of_packets_;
}
inline void NetworkHeader::set_number_of_packets(::google::protobuf::uint32 value) {
  _set_bit(2);
  number_of_packets_ = value;
}

// required string timestamp = 4;
inline bool NetworkHeader::has_timestamp() const {
  return _has_bit(3);
}
inline void NetworkHeader::clear_timestamp() {
  if (timestamp_ != &_default_timestamp_) {
    timestamp_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& NetworkHeader::timestamp() const {
  return *timestamp_;
}
inline void NetworkHeader::set_timestamp(const ::std::string& value) {
  _set_bit(3);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void NetworkHeader::set_timestamp(const char* value) {
  _set_bit(3);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(value);
}
inline void NetworkHeader::set_timestamp(const char* value, size_t size) {
  _set_bit(3);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  timestamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetworkHeader::mutable_timestamp() {
  _set_bit(3);
  if (timestamp_ == &_default_timestamp_) {
    timestamp_ = new ::std::string;
  }
  return timestamp_;
}

// required uint32 timeout = 5;
inline bool NetworkHeader::has_timeout() const {
  return _has_bit(4);
}
inline void NetworkHeader::clear_timeout() {
  timeout_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 NetworkHeader::timeout() const {
  return timeout_;
}
inline void NetworkHeader::set_timeout(::google::protobuf::uint32 value) {
  _set_bit(4);
  timeout_ = value;
}

// required string host = 6;
inline bool NetworkHeader::has_host() const {
  return _has_bit(5);
}
inline void NetworkHeader::clear_host() {
  if (host_ != &_default_host_) {
    host_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& NetworkHeader::host() const {
  return *host_;
}
inline void NetworkHeader::set_host(const ::std::string& value) {
  _set_bit(5);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void NetworkHeader::set_host(const char* value) {
  _set_bit(5);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void NetworkHeader::set_host(const char* value, size_t size) {
  _set_bit(5);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetworkHeader::mutable_host() {
  _set_bit(5);
  if (host_ == &_default_host_) {
    host_ = new ::std::string;
  }
  return host_;
}

// required string type = 7;
inline bool NetworkHeader::has_type() const {
  return _has_bit(6);
}
inline void NetworkHeader::clear_type() {
  if (type_ != &_default_type_) {
    type_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& NetworkHeader::type() const {
  return *type_;
}
inline void NetworkHeader::set_type(const ::std::string& value) {
  _set_bit(6);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void NetworkHeader::set_type(const char* value) {
  _set_bit(6);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void NetworkHeader::set_type(const char* value, size_t size) {
  _set_bit(6);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetworkHeader::mutable_type() {
  _set_bit(6);
  if (type_ == &_default_type_) {
    type_ = new ::std::string;
  }
  return type_;
}

// -------------------------------------------------------------------

// NetworkPacket

// required .NetworkHeader header = 1;
inline bool NetworkPacket::has_header() const {
  return _has_bit(0);
}
inline void NetworkPacket::clear_header() {
  if (header_ != NULL) header_->::NetworkHeader::Clear();
  _clear_bit(0);
}
inline const ::NetworkHeader& NetworkPacket::header() const {
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
inline ::NetworkHeader* NetworkPacket::mutable_header() {
  _set_bit(0);
  if (header_ == NULL) header_ = new ::NetworkHeader;
  return header_;
}

// required bytes byte_buffer = 2;
inline bool NetworkPacket::has_byte_buffer() const {
  return _has_bit(1);
}
inline void NetworkPacket::clear_byte_buffer() {
  if (byte_buffer_ != &_default_byte_buffer_) {
    byte_buffer_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NetworkPacket::byte_buffer() const {
  return *byte_buffer_;
}
inline void NetworkPacket::set_byte_buffer(const ::std::string& value) {
  _set_bit(1);
  if (byte_buffer_ == &_default_byte_buffer_) {
    byte_buffer_ = new ::std::string;
  }
  byte_buffer_->assign(value);
}
inline void NetworkPacket::set_byte_buffer(const char* value) {
  _set_bit(1);
  if (byte_buffer_ == &_default_byte_buffer_) {
    byte_buffer_ = new ::std::string;
  }
  byte_buffer_->assign(value);
}
inline void NetworkPacket::set_byte_buffer(const void* value, size_t size) {
  _set_bit(1);
  if (byte_buffer_ == &_default_byte_buffer_) {
    byte_buffer_ = new ::std::string;
  }
  byte_buffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NetworkPacket::mutable_byte_buffer() {
  _set_bit(1);
  if (byte_buffer_ == &_default_byte_buffer_) {
    byte_buffer_ = new ::std::string;
  }
  return byte_buffer_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_network_5fpacket_2eproto__INCLUDED
