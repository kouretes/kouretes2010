// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "VisionObservations.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* BallTrackMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallTrackMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* BallObsMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BallObsMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_VisionObservations_2eproto() {
  protobuf_AddDesc_VisionObservations_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "VisionObservations.proto");
  GOOGLE_CHECK(file != NULL);
  BallTrackMessage_descriptor_ = file->message_type(0);
  static const int BallTrackMessage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, cx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, cy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, radius_),
  };
  BallTrackMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallTrackMessage_descriptor_,
      BallTrackMessage::default_instance_,
      BallTrackMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallTrackMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallTrackMessage));
  BallObsMessage_descriptor_ = file->message_type(1);
  static const int BallObsMessage_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallObsMessage, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallObsMessage, publisher_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallObsMessage, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallObsMessage, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallObsMessage, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallObsMessage, dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallObsMessage, bearing_),
  };
  BallObsMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BallObsMessage_descriptor_,
      BallObsMessage::default_instance_,
      BallObsMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallObsMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BallObsMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BallObsMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_VisionObservations_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallTrackMessage_descriptor_, &BallTrackMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BallObsMessage_descriptor_, &BallObsMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_VisionObservations_2eproto() {
  delete BallTrackMessage::default_instance_;
  delete BallTrackMessage_reflection_;
  delete BallObsMessage::default_instance_;
  delete BallObsMessage_reflection_;
}

void protobuf_AddDesc_VisionObservations_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030VisionObservations.proto\"\261\001\n\020BallTrack"
    "Message\022\027\n\004host\030\001 \002(\t:\tlocalhost\022\023\n\tpubl"
    "isher\030\002 \002(\t:\000\022\025\n\005topic\030\003 \002(\t:\006global\022\022\n\007"
    "timeout\030\004 \002(\005:\0010\022\023\n\ttimestamp\030\005 \002(\t:\000\022\r\n"
    "\002cx\030\006 \002(\002:\0010\022\r\n\002cy\030\007 \002(\002:\0010\022\021\n\006radius\030\010 "
    "\002(\002:\0010\"\243\001\n\016BallObsMessage\022\027\n\004host\030\001 \002(\t:"
    "\tlocalhost\022\023\n\tpublisher\030\002 \002(\t:\000\022\025\n\005topic"
    "\030\003 \002(\t:\006global\022\022\n\007timeout\030\004 \002(\005:\0010\022\023\n\tti"
    "mestamp\030\005 \002(\t:\000\022\017\n\004dist\030\006 \002(\002:\0010\022\022\n\007bear"
    "ing\030\007 \002(\002:\0010", 372);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "VisionObservations.proto", &protobuf_RegisterTypes);
  BallTrackMessage::default_instance_ = new BallTrackMessage();
  BallObsMessage::default_instance_ = new BallObsMessage();
  BallTrackMessage::default_instance_->InitAsDefaultInstance();
  BallObsMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_VisionObservations_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_VisionObservations_2eproto {
  StaticDescriptorInitializer_VisionObservations_2eproto() {
    protobuf_AddDesc_VisionObservations_2eproto();
  }
} static_descriptor_initializer_VisionObservations_2eproto_;


// ===================================================================

const ::std::string BallTrackMessage::_default_host_("localhost");
const ::std::string BallTrackMessage::_default_publisher_;
const ::std::string BallTrackMessage::_default_topic_("global");
const ::std::string BallTrackMessage::_default_timestamp_;
#ifndef _MSC_VER
const int BallTrackMessage::kHostFieldNumber;
const int BallTrackMessage::kPublisherFieldNumber;
const int BallTrackMessage::kTopicFieldNumber;
const int BallTrackMessage::kTimeoutFieldNumber;
const int BallTrackMessage::kTimestampFieldNumber;
const int BallTrackMessage::kCxFieldNumber;
const int BallTrackMessage::kCyFieldNumber;
const int BallTrackMessage::kRadiusFieldNumber;
#endif  // !_MSC_VER

BallTrackMessage::BallTrackMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallTrackMessage::InitAsDefaultInstance() {
}

BallTrackMessage::BallTrackMessage(const BallTrackMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallTrackMessage::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  publisher_ = const_cast< ::std::string*>(&_default_publisher_);
  topic_ = const_cast< ::std::string*>(&_default_topic_);
  timeout_ = 0;
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  cx_ = 0;
  cy_ = 0;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallTrackMessage::~BallTrackMessage() {
  SharedDtor();
}

void BallTrackMessage::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (publisher_ != &_default_publisher_) {
    delete publisher_;
  }
  if (topic_ != &_default_topic_) {
    delete topic_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void BallTrackMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallTrackMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallTrackMessage_descriptor_;
}

const BallTrackMessage& BallTrackMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisionObservations_2eproto();  return *default_instance_;
}

BallTrackMessage* BallTrackMessage::default_instance_ = NULL;

BallTrackMessage* BallTrackMessage::New() const {
  return new BallTrackMessage;
}

void BallTrackMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (host_ != &_default_host_) {
        host_->assign(_default_host_);
      }
    }
    if (_has_bit(1)) {
      if (publisher_ != &_default_publisher_) {
        publisher_->clear();
      }
    }
    if (_has_bit(2)) {
      if (topic_ != &_default_topic_) {
        topic_->assign(_default_topic_);
      }
    }
    timeout_ = 0;
    if (_has_bit(4)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
    cx_ = 0;
    cy_ = 0;
    radius_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallTrackMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }
      
      // required string publisher = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }
      
      // required string topic = 3 [default = "global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_cx;
        break;
      }
      
      // required float cx = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cx_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_cy;
        break;
      }
      
      // required float cy = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cy_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_radius;
        break;
      }
      
      // required float radius = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          _set_bit(7);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallTrackMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->publisher(), output);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(), output);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }
  
  // required float cx = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cx(), output);
  }
  
  // required float cy = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->cy(), output);
  }
  
  // required float radius = 8 [default = 0];
  if (_has_bit(7)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->radius(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallTrackMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->publisher(), target);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }
  
  // required float cx = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cx(), target);
  }
  
  // required float cy = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->cy(), target);
  }
  
  // required float radius = 8 [default = 0];
  if (_has_bit(7)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->radius(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallTrackMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1 [default = "localhost"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string publisher = 2 [default = ""];
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // required string topic = 3 [default = "global"];
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // required int32 timeout = 4 [default = 0];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required string timestamp = 5 [default = ""];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // required float cx = 6 [default = 0];
    if (has_cx()) {
      total_size += 1 + 4;
    }
    
    // required float cy = 7 [default = 0];
    if (has_cy()) {
      total_size += 1 + 4;
    }
    
    // required float radius = 8 [default = 0];
    if (has_radius()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallTrackMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallTrackMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallTrackMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallTrackMessage::MergeFrom(const BallTrackMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_host(from.host());
    }
    if (from._has_bit(1)) {
      set_publisher(from.publisher());
    }
    if (from._has_bit(2)) {
      set_topic(from.topic());
    }
    if (from._has_bit(3)) {
      set_timeout(from.timeout());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(5)) {
      set_cx(from.cx());
    }
    if (from._has_bit(6)) {
      set_cy(from.cy());
    }
    if (from._has_bit(7)) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallTrackMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallTrackMessage::CopyFrom(const BallTrackMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallTrackMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;
  
  return true;
}

void BallTrackMessage::Swap(BallTrackMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(publisher_, other->publisher_);
    std::swap(topic_, other->topic_);
    std::swap(timeout_, other->timeout_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(cx_, other->cx_);
    std::swap(cy_, other->cy_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallTrackMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallTrackMessage_descriptor_;
  metadata.reflection = BallTrackMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::std::string BallObsMessage::_default_host_("localhost");
const ::std::string BallObsMessage::_default_publisher_;
const ::std::string BallObsMessage::_default_topic_("global");
const ::std::string BallObsMessage::_default_timestamp_;
#ifndef _MSC_VER
const int BallObsMessage::kHostFieldNumber;
const int BallObsMessage::kPublisherFieldNumber;
const int BallObsMessage::kTopicFieldNumber;
const int BallObsMessage::kTimeoutFieldNumber;
const int BallObsMessage::kTimestampFieldNumber;
const int BallObsMessage::kDistFieldNumber;
const int BallObsMessage::kBearingFieldNumber;
#endif  // !_MSC_VER

BallObsMessage::BallObsMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BallObsMessage::InitAsDefaultInstance() {
}

BallObsMessage::BallObsMessage(const BallObsMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BallObsMessage::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&_default_host_);
  publisher_ = const_cast< ::std::string*>(&_default_publisher_);
  topic_ = const_cast< ::std::string*>(&_default_topic_);
  timeout_ = 0;
  timestamp_ = const_cast< ::std::string*>(&_default_timestamp_);
  dist_ = 0;
  bearing_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BallObsMessage::~BallObsMessage() {
  SharedDtor();
}

void BallObsMessage::SharedDtor() {
  if (host_ != &_default_host_) {
    delete host_;
  }
  if (publisher_ != &_default_publisher_) {
    delete publisher_;
  }
  if (topic_ != &_default_topic_) {
    delete topic_;
  }
  if (timestamp_ != &_default_timestamp_) {
    delete timestamp_;
  }
  if (this != default_instance_) {
  }
}

void BallObsMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BallObsMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BallObsMessage_descriptor_;
}

const BallObsMessage& BallObsMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_VisionObservations_2eproto();  return *default_instance_;
}

BallObsMessage* BallObsMessage::default_instance_ = NULL;

BallObsMessage* BallObsMessage::New() const {
  return new BallObsMessage;
}

void BallObsMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (host_ != &_default_host_) {
        host_->assign(_default_host_);
      }
    }
    if (_has_bit(1)) {
      if (publisher_ != &_default_publisher_) {
        publisher_->clear();
      }
    }
    if (_has_bit(2)) {
      if (topic_ != &_default_topic_) {
        topic_->assign(_default_topic_);
      }
    }
    timeout_ = 0;
    if (_has_bit(4)) {
      if (timestamp_ != &_default_timestamp_) {
        timestamp_->clear();
      }
    }
    dist_ = 0;
    bearing_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BallObsMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string host = 1 [default = "localhost"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_publisher;
        break;
      }
      
      // required string publisher = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_publisher:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_publisher()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->publisher().data(), this->publisher().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topic;
        break;
      }
      
      // required string topic = 3 [default = "global"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timeout;
        break;
      }
      
      // required int32 timeout = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          _set_bit(3);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_timestamp;
        break;
      }
      
      // required string timestamp = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_timestamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->timestamp().data(), this->timestamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_dist;
        break;
      }
      
      // required float dist = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dist_)));
          _set_bit(5);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_bearing;
        break;
      }
      
      // required float bearing = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bearing_)));
          _set_bit(6);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BallObsMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->publisher(), output);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->topic(), output);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->timeout(), output);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->timestamp(), output);
  }
  
  // required float dist = 6 [default = 0];
  if (_has_bit(5)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dist(), output);
  }
  
  // required float bearing = 7 [default = 0];
  if (_has_bit(6)) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->bearing(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BallObsMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string host = 1 [default = "localhost"];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // required string publisher = 2 [default = ""];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->publisher().data(), this->publisher().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->publisher(), target);
  }
  
  // required string topic = 3 [default = "global"];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->topic(), target);
  }
  
  // required int32 timeout = 4 [default = 0];
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->timeout(), target);
  }
  
  // required string timestamp = 5 [default = ""];
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->timestamp().data(), this->timestamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->timestamp(), target);
  }
  
  // required float dist = 6 [default = 0];
  if (_has_bit(5)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dist(), target);
  }
  
  // required float bearing = 7 [default = 0];
  if (_has_bit(6)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->bearing(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BallObsMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string host = 1 [default = "localhost"];
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // required string publisher = 2 [default = ""];
    if (has_publisher()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->publisher());
    }
    
    // required string topic = 3 [default = "global"];
    if (has_topic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topic());
    }
    
    // required int32 timeout = 4 [default = 0];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required string timestamp = 5 [default = ""];
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->timestamp());
    }
    
    // required float dist = 6 [default = 0];
    if (has_dist()) {
      total_size += 1 + 4;
    }
    
    // required float bearing = 7 [default = 0];
    if (has_bearing()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BallObsMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BallObsMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BallObsMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BallObsMessage::MergeFrom(const BallObsMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_host(from.host());
    }
    if (from._has_bit(1)) {
      set_publisher(from.publisher());
    }
    if (from._has_bit(2)) {
      set_topic(from.topic());
    }
    if (from._has_bit(3)) {
      set_timeout(from.timeout());
    }
    if (from._has_bit(4)) {
      set_timestamp(from.timestamp());
    }
    if (from._has_bit(5)) {
      set_dist(from.dist());
    }
    if (from._has_bit(6)) {
      set_bearing(from.bearing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BallObsMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BallObsMessage::CopyFrom(const BallObsMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BallObsMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void BallObsMessage::Swap(BallObsMessage* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(publisher_, other->publisher_);
    std::swap(topic_, other->topic_);
    std::swap(timeout_, other->timeout_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(dist_, other->dist_);
    std::swap(bearing_, other->bearing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BallObsMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BallObsMessage_descriptor_;
  metadata.reflection = BallObsMessage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
